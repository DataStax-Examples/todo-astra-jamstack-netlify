# For full config options, check the docs:
#    docs.serverless.com

service: todo

provider:
  name: aws
  runtime: nodejs12.x
  region: ${env:AWS_REGION, 'us-east-1'}
  stage: dev
  stackTags:
    STACK: "todo"
  # optional, in MB, default is 1024, min 128
  memorySize: 128
  # optional, in seconds, default is 6
  timeout: 6
  # optional, default is true
  versionFunctions: false
  # IAM custom roles
  iamRoleStatements:
    # Allow access to CloudWatch logs for lambdas in role
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - 'Fn::Join':
          - ':'
          -
            - 'arn:aws:logs'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'log-group:/aws/lambda/*:*:*'
  # Define additional env vars for deployment
  environment:
    TODO_TABLE: ${self:custom.todoTable}
    API_URL: ${self:custom.apiUrlByCustomDomain.${env:CUSTOM_DOMAIN_ENABLED, 'false'}}
    ASTRA_SECURE_BUNDLE_ZIP: ${env:ASTRA_SECURE_BUNDLE_ZIP, '/opt/secure-connect-todolist.zip'}
    ASTRA_KEYSPACE: ${env:ASTRA_KEYSPACE, 'todolist'}
    ASTRA_USERNAME: ${env:ASTRA_USERNAME, 'todolist'}
    ASTRA_PASSWORD: ${env:ASTRA_PASSWORD, 'todolist'}
    PUBLIC_PATH: ${env:PUBLIC_PATH}, ''}
custom:
  todoTable: 'todos'
  # If set, CDN bucket will be created
  cdnBucketName: ${env:CDN_BUCKET, 'todo-dev-cdn-bucket'}
  # Set API_URL by custom domain here
  apiUrlByCustomDomain:
    true: https://${env:CUSTOM_DOMAIN, 'custom.domain.serverless.com'}/api
    false: ${env:PUBLIC_PATH, ''}/api
  # Make special webpack transpiling for Serverless
  webpack:
    webpackConfig: ./webpack.serverless.js
    includeModules: true
    packager: 'npm'
  # Create custom domain and serve it using https://$CUSTOM_DOMAIN/* -> <api endpoint>/*
  customDomain:
    domainName: ${env:CUSTOM_DOMAIN, 'custom.domain.serverless.com'}
    createRoute53Record: true
    enabled: ${env:CUSTOM_DOMAIN_ENABLED, 'false'}
  # Add binary images as handled in API gateway
  apigwBinary:
    types:
      - 'image/*'
      - 'application/font*'
      - 'application/pdf'
  s3Sync:
    - bucketName: ${self:custom.cdnBucketName, 'undefined'}
      localDir: ./dist
      acl: public-read
      followSymlinks: true
      defaultContentType: application/octet-stream
      params:
        - "*.*":
            CacheControl: 'no-cache'
package:
  exclude:
    - tmp/**
    - node_modules/aws_sdk/**

functions:
  app:
    handler: server.serverless 
    layers: 
      - {Ref: AstraLambdaLayer}
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
      - http:
          # List all todos
          path: api/todo/{any+}
          method: get
      - http:
          # Add new todo
          path: api/todo/{any+}
          method: post
      - http:
          # Update todo
          path: api/todo/{any+}
          method: delete
      - http:
          # Reinit todo db
          path: api/init
          method: post
plugins:
  - serverless-webpack
  - serverless-domain-manager
  - serverless-apigw-binary
  - serverless-offline
  - serverless-s3-sync

layers:
  astra:
    path: astra

resources:
  Conditions:
    CreateCdnBucket:
      Fn::Not:
        - Fn::Equals:
          - ${self:custom.cdnBucketName, ''}
          - ''
  Resources:
    CdnBucket:
      Type: AWS::S3::Bucket
      Condition: CreateCdnBucket
      Properties:
        BucketName: ${self:custom.cdnBucketName, 'undefined'}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
